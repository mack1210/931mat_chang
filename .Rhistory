num
m1 = 10
m2 = 5
num = 0
for (k in 1:200)
{
set.seed(k)
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
print(m1)
print(m2)
num=num+1
}else{
m1=m1+1
m2=m2-1
print(m1)
print(m2)
}
#### 가상 실험 ####
}
num
m1 = 10
m2 = 5
num = 0
for (k in 1:200)
{
set.seed(k)
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
print(m1)
print(m2)
num=num+1
}else{
m1=m1+1
m2=m2-1
print(m1)
print(m2)
}
#### 가상 실험 ####
}
num
m1 = 10
m2 = 5
num = 0
for (k in 1:200)
{
set.seed(k+1)
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
print(m1)
print(m2)
num=num+1
}else{
m1=m1+1
m2=m2-1
print(m1)
print(m2)
}
#### 가상 실험 ####
}
num
m1 = 10
m2 = 5
num = 0
for (k in 1:200)
{
set.seed(k)
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
print(m1)
print(m2)
num=num+1
}else{
m1=m1+1
m2=m2-1
print(m1)
print(m2)
}
#### 가상 실험 ####
}
num
m1 = 10
m2 = 5
num = 0
for (k in 1:200)
{
set.seed(k)
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
print(m1)
print(m2)
num=num+1
}else{
m1=m1+1
m2=m2-1
print(m1)
print(m2)
}
#### 가상 실험 ####
}
num
m1 = 10
m2 = 5
num = 0
for(i in 1:10)
{
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
if(m1==0)
{
num=num+1
}
}
num
m1 = 10
m2 = 5
num = 0
for(i in 1:10)
{
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
if(m2==0)
{
num=num+1
}
}
num
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
###10.
##1) 10원
m1 = 10
m2 = 5
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
rm(list=ls())
rm(list=ls())
m1 = 10
m2 = 5
num = 0
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
num = 0
for(i in 1:10)
{
m1 = 10
m2 = 5
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
if(m2==0)
{
num=num+1
}
}
num
num = 0
for(i in 1:1000)
{
m1 = 10
m2 = 5
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
if(m2==0)
{
num=num+1
}
}
num
num = 0
for(i in 1:1000)
{
m1 = 10
m2 = 5
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
if(m2==0)
{
num=num+1
}
}
num
num = 0
for(i in 1:10000)
{
m1 = 10
m2 = 5
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
if(m2==0)
{
num=num+1
}
}
num
num = 0
for(i in 1:10000)
{
m1 = 15
m2 = 5
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
if(m2==0)
{
num=num+1
}
}
num
num = 0
for(i in 1:10000)
{
m1 = 20
m2 = 5
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
if(m2==0)
{
num=num+1
}
}
num
num = 0
for(i in 1:10000)
{
m1 = 25
m2 = 5
while(m1>0&m2>0)
{
g=rbinom(1,1,1/2)
if(g==0)
{
m1=m1-1
m2=m2+1
}else{
m1=m1+1
m2=m2-1
}
}
if(m2==0)
{
num=num+1
}
}
num
rm(list=ls())
###5.
x<-matrix(runif(5000,1,10),1000,5)
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
x<-matrix(0,1000,5)
runif(5000,1,10)
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
x<-matrix(runif(5000,1,10),1000,5)
ㅌ
x
?round
digits
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
x<-matrix(round(runif(5000,1,10),digits=0),1000,5)
x
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
x<-matrix(round(runif(5000,1,10),digits=10),1000,5)
x
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
x<-matrix(round(runif(5000,1,10),digits=1),1000,5)
x
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
x<-matrix(round(runif(5000,1,10),digits=0),1000,5)
x
getOption("max.print")
print(x[1,])
sid<-x
sid[1]
sid[1,]
x[1,]
sid<-vector()
sid<-(double)vector()
x[1,]
sid[1]=x[1,]
sid<-x
sid
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
sid<-round(runif(5000,1,10),digits=0)
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
sid<-round(runif(5,1,10),digits=0)
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
sid<-round(runif(5,1,10),digits=0)
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
x<-matrix(0,1000,5)
sid<-round(runif(5,1,10),digits=0)
sid<-round(runif(5,1,10),digits=0)
sid<-round(runif(5,1,10),digits=0)
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
x<-matrix(round(runif(5000,1,10),digits=0),1000,5)
x<-matrix(0,1000,5)
###5.
#관측치의 값이0~10까지가 아닌
#1~10이라는 것은 자연수라는 해석이 더 합리적이라고 생각
#x<-matrix(round(runif(5000,1,10),digits=0),1000,5)
x<-matrix(0,1000,5)
for(i in 1:length(x[,1]))
{
sid<-round(runif(5,1,10),digits=0)
x[i,]<-sid
}
x
x[1000,]
sid[1]
###6.
m.mat<-matrix(0,10,5)
for(i in 1:10)
{
# sid가 i값을 가지는 위치들의 벡터를 a에 저장
a = c((which(x==i)))
s_data <- rep(0,5) # 앞으로 더할 데이터 합의 벡터 s_data 생성
for(j in a)
{
# sid가 i값을 가지는 위치의 값들을 더해감
s_data = s_data + x[j,]
}
m.mat[i,] = s_data / length(a) # 더한값을 a의 길이로 나누어 평균을 m.mat에 저장
}
m.mat
# sid가 i값을 가지는 위치들의 벡터를 a에 저장
a = c((which(x==i)))
a
x
rm(list=ls())
x<-matrix(0,1000,5)
#sid를 할당 결과를 가진 행렬이라고 생각하면 매번 random number를 생산해 x[i,]에 결과를 입력해준다.
for(i in 1:length(x[,1]))
{
sid<-round(runif(5,1,10),digits=0)
x[i,]<-sid
}
x
###6.
m.mat<-matrix(0,10,5)
sumdata <- c(0,5) # 앞으로 더할 데이터 합의 벡터 s_data 생성
sumdata <- rep(0,5) # 앞으로 더할 데이터 합의 벡터 s_data 생성
for(i in 1:10)
{
# sid가 i값을 가지는 위치들의 벡터를 a에 저장
a = c((which(x==i)))
sumdata <- rep(0,5) # 앞으로 더할 데이터 합의 벡터 sumdata 생성
for(j in a)
{
# sid가 i값을 가지는 위치의 값들을 더해감
sumdata = sumdata + x[j,]
}
m.mat[i,] = sumdata / length(a) # 더한값을 a의 길이로 나누어 평균을 m.mat에 저장
}
# sid가 i값을 가지는 위치들의 벡터를 a에 저장
a = c((which(x==i)))
a
View(x)
View(x)
